generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  refresh_token_expires_in Int?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}
model Review {
  id        String   @id @default(cuid()) // 리뷰 고유 아이디
  rating    Int // 리뷰 평점
  comment   String // 리뷰 내용
  createdAt DateTime @default(now()) // 리뷰 작성일
  updatedAt DateTime @updatedAt // 리뷰 수정일
  userId    String   @map("user_id") // 리뷰 작성자 고유 아이디
  movieId   String   @map("movie_id") // 리뷰 대상 영화의 고유 아이디
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("reviews") // 테이블 이름을 reviews로 지정
}