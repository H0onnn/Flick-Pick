generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  refresh_token_expires_in Int?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  likes         Like[]
  reviewLikes  ReviewLike[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Movie {
  id           String   @id @default(cuid()) // 영화 고유 아이디
  title        String   // 영화 제목
  overview     String  // 영화 줄거리
  poster       String   // 영화 포스터 이미지 UR
  releaseDate  String @map("release_date")  // 영화 개봉일 
  createdAt    DateTime @default(now()) @map("created_at")  // 영화 등록일
  reviews      Review[] // 영화에 대한 리뷰 목록
  likes        Like[]   // 영화에 대한 좋아요 목록
 
  @@map("movies") // 테이블 이름을 movies로 지정
}

model Review {
  id        String   @id @default(cuid()) // 리뷰 고유 아이디
  rating    Float // 리뷰 평점
  comment   String // 리뷰 내용
  createdAt DateTime @default(now()) @map("created_at")  // 리뷰 작성일
  updatedAt DateTime? @updatedAt @default(now()) @map("updated_at")  // 리뷰 수정일
  userId    String   @map("user_id") // 리뷰 작성자 고유 아이디
  movieId   String   @map("movie_id") // 리뷰 대상 영화의 고유 아이디

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  likes     ReviewLike[] // 리뷰에 대한 좋아요 목록
 
  @@map("reviews") // 테이블 이름을 reviews로 지정
}

model Like {
  id        String   @id @default(cuid()) // 좋아요 고유 아이디
  userId    String   @map("user_id") // 좋아요 누른 사용자 고유 아이디
  movieId   String   @map("movie_id") // 좋아요 대상 영화의 고유 아이디

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
 
  @@map("likes") // 테이블 이름을 likes로 지정
}

model ReviewLike {
  id        String   @id @default(cuid()) // 리뷰 좋아요 고유 아이디
  userId    String   @map("user_id") // 리뷰 좋아요 누른 사용자 고유 아이디
  reviewId  String   @map("review_id") // 좋아요 대상 리뷰의 고유 아이디

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  review     Review    @relation(fields: [reviewId], references: [id], onDelete: Cascade)
 
  @@map("review_likes") // 테이블 이름을 review_likes로 지정
}